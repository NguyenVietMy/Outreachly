spring.application.name=outreachly
server.port=8080

# Database configuration - Supabase Direct Connection (RLS enabled)
spring.datasource.url=${SUPABASE_SESSION_POOLER}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database connection settings optimized for Supabase
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000

# JPA/Hibernate configuration 
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.type.json_format_mapper=org.hibernate.type.format.jackson.JacksonJsonFormatMapper




# Actuator configuration for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always


spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE:openid,profile,email}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}

spring.security.oauth2.client.provider.google.authorization-uri=${GOOGLE_AUTH_URI:https://accounts.google.com/o/oauth2/v2/auth}
spring.security.oauth2.client.provider.google.token-uri=${GOOGLE_TOKEN_URI:https://www.googleapis.com/oauth2/v4/token}
spring.security.oauth2.client.provider.google.user-info-uri=${GOOGLE_USER_INFO_URI:https://www.googleapis.com/oauth2/v3/userinfo}
spring.security.oauth2.client.provider.google.user-name-attribute=${GOOGLE_USER_NAME_ATTRIBUTE:email}


# Enrichment / Hunter placeholders
spring.config.import=optional:file:.env.properties
HUNTER_API_KEY=${HUNTER_ACC_1}
HUNTER_API_KEYS=${HUNTER_ACC_1},${HUNTER_ACC_2}
HUNTER_BASE_URL=https://api.hunter.io/v2
HUNTER_TIMEOUT_MS=500

ENRICH_ENABLED=true
ENRICH_RATE_PER_MIN=30
ENRICH_MAX_RETRIES=3
ENRICH_BACKOFF_MS=1000
ENRICH_CONFIDENCE_MIN=0.6
ENRICH_CACHE_TTL_DAYS=0
ENRICH_CONCURRENCY_PER_ORG=5

# Application URLs
FRONTEND_URL=${FRONTEND_URL:http://localhost:3000}

# Session configuration
server.servlet.session.timeout=30m
server.servlet.session.cookie.name=JSESSIONID
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.same-site=lax

# Webhook configuration
WEBHOOK_ENABLED=false
WEBHOOK_URL=
WEBHOOK_SECRET=

# Email Provider Configuration
email.provider=resend

# AWS SES Configuration
aws.ses.region=us-east-1
aws.ses.from-email=${AWS_FROM_EMAIL}
aws.ses.from-name=${AWS_FROM_NAME}
aws.ses.bounce-email=${AWS_BOUNCE_EMAIL}
aws.ses.complaint-email=${AWS_COMPLAINT_EMAIL}

# Resend Configuration (optional)
resend.api-key=${RESEND_API_KEY:}
resend.from-email=${RESEND_FROM_EMAIL:}

# OpenAI Configuration
OPENAI_API_KEY=${OPENAI_API_KEY:}
